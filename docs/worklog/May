# Worklog for May 

# Week 18 (01/05/2024 - 05/05/2024)

### Date: 01/05/2024

**Task**: Test field validations for the Credit Notes model

**Time Spent**: 2.5h

**Objective**: Test that that the Credit Notes model does what it needs to do.

**Achievements**:
- Wrote a test to make sure that no credit notes could be added with the same Credit Notes ID.
- Wrote tests to make sure that CN_ID and Account number ID do not exceed character lenght limit.
- Set up fixture dictionaries containing data for the fields of credit notes model instance, with missing fields.
- Wrote a test to see if missing CN_ID would raise IntegrityError.  

**What did I learn?**:
- In Python: when using the syntax 'dictionary["key"] = value' 
    -> Python checks first if "key" exists in the dictionary.
    -> If the key exists, then its value will be updated.
    -> If "key" does not exist yet in the dictionary, the key will be added with the      specifified value. 
- In Django: if a model is dependent on another model through a foreign key relationship
    -> You can use an instance of that model stored in a variable to directly assign it as the foreign key for the model that is dependent on it.
    -> test_credit_note_data['D_ID'] = dealer
- In Django, the '.full_clean()' method is a Django model instance method, and what it does it validate all of the fields of that model. It can be used to manually trigger a validation on a model instance that has been created but not yet saved. When the validation fails, Django will raise a ValidationError. 

**Blockers**:
- Had to set up venv, Git, .env, .gitignore etc. on new laptop.

**Next Steps**:
- Figure out why the missing CN_ID test does not raise an IntegrityError, while the CN_ID is set as primary key in the database, which implicitly constraints it from being a null value. 

---------------------------------------------------------------------------------------
### Date: 02/05/2024

**Task**: Test field validations for the Credit Notes model

**Time Spent**: 2h

**Objective**: Figure out why the missing CN_ID test does not raise an IntegrityError, while the CN_ID is set as primary key in the database, which implicitly constraints it from being a null value. 

**Achievements**:
- I undid all the previous migrations, and set up the models with primary keys for each table, and made sure that the Django models cannot make changes to the database schema.

**Blockers**:
- All the tests are failing now =)

**Next Steps**:
- Figure out why all the test are failing. 

---------------------------------------------------------------------------------------
### Date: 03/05/2024

**Task**: Figure out why all the tests are failing.

**Time Spent**: 2,5h

**Objective**: Figure out why suddenly there is regression of all the previously passing tests. 

**Achievements**:
- After struggling to find out what exactly had gone wrong, I decided to revert the repository back into a state where the tests were passing, the state prior to introducing the changes that brought forth the regression.
- I removed the meta parameter 'managed' which was previously set to 'true' for the database models.
- I had to set default values for the CN_ID and D_ID in the credit notes models to an empty string '' as these are mandatory fields that cannot be NULL values, and the database still had some records with NULL values in them for these columns.
- After making these changes to the model(s) I remade the migrations and ran them.
- After these reversions, the tests ran again.
- Note: the test to check if the 'CN_ID' value could be NULL was not included yet.

**Next Steps**:
- Re-introduce test to see if an empty 'CN_ID' value raises an integrity error.  

----------------------------------------------------------------------------------------
### Date: 04/05/2024

**Task**: Test field validations for the credit notes model.

**Time Spent**: 2,5h

**Objective**: Complete test field validation tests for the credit notes model.

**Achievements**: 
- Wrote tests for required fields CN_ID and D_ID not being nullable.
- Wrote test for validating that CN_ID is unique at the model level.

**What did I learn?**:
- A "ValidationError" is raised for a model-level error.
- An "IntegrityError" is raised for a database-level data integrity error.
- An "OperationalError" is raised for a database connection error.
- The .full_clean() model method checks for unique constraints as defined in the Django model and should be explicitly called to catch validation errors before data hitting the database.
- The .save() model method saves model instances to the database. It takes the current state of the fields in the model instance and writes them to the database table. If the primary key already exists, the .save() method updates the record, otherwise it creates a new record. 
- IMPORTANT! The .save() model does not perform any validation of the data. To ensure the data is valid before saving to the database, call the .full_clean() method before calling .save()

**Next Steps**:
- Check with Paulo if TotalDocumentAmount, TotalVATAmountDocument, TotalDocumentAmountWithVAT, AccountingNumberID and IssuedDate are all mandatory fields.
- Paulo has confirmed to me that these fields are all mandatory. Tomorrow, I will write tests to make sure that these constraints are implemented.  

----------------------------------------------------------------------------------------
# Week 18 (06/05/2024 - 12/05/2024)

### Date: 09/05/2024

**Task**: Complete models for dashboard app

**Time Spent**: 2h

**Objective**: Complete models for dashboard app, stop doing TDD as it takes too much time and you will not be able to deliver the application on time to the business.

**Achievements**:
- Completed the Credit Notes model, but it is untested. 
- Started working on Credit Notes Resume Email model. 

**What did I learn?**:
- TDD is a very useful practice, but it can take a lot of time initially to set up all of the tests. If I had more time, I would have continued TDD, but that is not the case unfortunately. 
- Difference between "auto_now_add" and "auto_now":
    - "auto_now_add": sets the field to the current date and time only when the model instance is created.
    - "auto_now": sets the field to the current date and time every time the model instance is saved.

**Next Steps**:
- Complete CreditNoteResume model.
- Figure out if the dates on instances of credit notes, credit note resumes and acknowledgementrequest should be assigned on the creation of that instance or whether they have been set prior. 

---------------------------------------------------------------------------------------

### Date: 10/05/2024

**Task**: Complete models for dashboard app

**Time Spent**: 2.5h

**Objective**:
- Complete CreditNoteResume model.
- Figure out if the dates on instances of credit notes, credit note resumes and acknowledgementrequest should be assigned on the creation of that instance or whether they have been set prior. 

**Achievements**:
- Updated Credit Notes model. 

**Blockers**:
- 8 tests failed or raised an error after the changes I made yesterday to the CreditNotes model, so I had to fix them first. 

**What did I learn?**:
- Tests add a lot of overhead, but at the same time they are needed to make sure that the code does what it needs to do.
- From my own documentation, a reminder: 
    - The system should retrieve all credit notes issued to Dealers from the Navision database in the past month. This means that the IssuedDate field in the credit notes should not be assigned at the creation of an instance, it will be provided by the data from the Navision database.    
    - The system should produce a Credit Notes Resume table for each dealer. This means that the dates on instance of credit note resumes should be assigned on the creation of that instance.
    - The system wil will generate an acknowledgement request for the credit notes resume table. So the dates on an instance of the acknowledgement request need to be assigned upon creation of the instance. 

**Next Steps**:
- As the Dealers data is being imported from the Navision database, should the dateTime be set on creation of the instance or should it just be imported from the Navision database? Check with Paulo. 
    - If you're importing data through a process that uses this model (for instance, through Django's ORM, admin interface, or custom scripts using the model), these fields will behave as expected. However, if data is directly inserted into the database bypassing Django's ORM (like using raw SQL or external tools), Django's automatic date handling will not apply, and those fields will need to be manually handled.
- The database is currently empty. 
- Complete CreditNoteResume model.

---------------------------------------------------------------------------------------

### Date: 16/05/2024

**Task**: Complete models for dashboard app

**Time Spent**: 2.5h

**Objective**:
- Complete CreditNoteResume model.

**Achievements**:
- Completed CreditNoteResume, AcknowledgementRequest, AcknowledgementReceoved models.

**Blockers**:
- None. Only one test failed, regarding the wrong title of a template, which is fixed now.

**What did I learn?**:
- Developing without TDD is much faster, but I am not very confident in all behaviour working as desired. After completing a version or something visual for the users and business to be happy to see progress, I want to run some more unit tests to test the behaviour of the invidual components.
- It's nice to see things come together, and I want to polish the shit out of this tool to make it work as fast as possible, the most secure way and cover edge cases. 
- I feel my understanding of the Django models is much better now, so I can write the code faster too. 

**Next Steps**:
- Check with Paulo why subject of the CreditNotesResumeEmail is stored in the database, as it should be the same for every email sent?
- Figure out or ask Paulo what the purpose of the Status and IsValid fields are for again in the CreditNotesResume model. 
    - Figured it out: isValid is a bool that can be modified to False if a faulty CreditNoteResume email has been sent
- ask Paulo if there are any restrictions on the file type and size in the AcknowledgementReceived table
- If MsgFile might contain sensitive information:
    - Encryption: Consider encrypting the data before it's stored and decrypting it upon retrieval if security is a major concern.
    - Secure Access: Ensure that only authorized users can access or manipulate these records, perhaps by implementing view and change permissions.

---------------------------------------------------------------------------------------

### Date: 28/05/2024

**Task**: 
- Clean project repository
- remove dead code 
- refactor where needed.

**Time Spent**: 2,5h

**Objective**: 
- Remove obsolete templates, view functions and urls. 

**Achievements**:
- removed credit note resume email template, view function and url path as resume generation will not be a button to push on the front-end but will happen automatically on the back-end every month
- removed template, view function and url path that showed credit notes from the previous month grouped by dealer as it is now obsolete
- removed template, view and url path to page that shows credit notes from the previous month as it is obsolete
- renamed dashboard_2 template, view and url function to dashboard in order to replace static dashboard with dynamic and redirect to dashboard on homepage
- updated import statements for improved readability
- removed extra and trailing whitespaces
- updated Dealer ID validation and moved it as part of the clean method of the Dealer model class
- added migration to apply change to Dealer ID field in the Dealer model class
- updated vat validation function to raise ValidationError instead of returning a boolean
- updated dealer model clean method by calling the validate vat function directly
- updated model file with docstrings and comments on how to change and potentially improve the model
- removed unnecessary comments and added docstring to create credit note resume emails function
- deleted auto generated Django file for testing as testing is handled by pytest
- added docstrings to validation functions for easier understanding
- added docstring to dashboard_view function for readability
- removed obsolete docstring files

**Blockers**:
- None. Everything still working as it should. 

**What did I learn?**:
- Readable code is important, both for me and the people who will be working on it afterwards.

**Next Steps**:
- Start working on functionality again, and use the requirements document as a guide. 
- Refactor only after you have completed some functionality. 

---------------------------------------------------------------------------------------

### Date: 29/05/2024

**Task**: Create the function that generates the Credit Note Resume Table Email for the Dealers

**Time Spent**: 4h

**Objective**: 
- Create the function that generates the Credit Note Resume Table Email for the Dealers and saves the file.

**Achievements**:
- added comments to make the the service functions more general in order to avoid code repetition and make querying the data easier
- added service function to generate email content for credit note resume
- added dictionary with email template content for credit note resume email
- updated generate email function to mark HTML content as safe in order to avoid escaped characters
- added unicode to email template for special characters
- added generate email content function call to create credit note resume email
- updated generate email function with correct type for recipient variable
- updated create credit note resume email function by storing and printing generated email content
- updated generate_email_content function to format issued date to day, month, year, without time
- updated generate_email_content function to format VAT amounts to only two decimals
- updated generate email content function to return HTML with UTF-8 encoding
- added service function to save generated email content to a file
- added save_email_content_to_file function call to create_credit_note_resume_emails so email contents get saved when generating credit note resume
- updated email template to be fully portuguese instead of english
- added service function to query for credit note resumes in a given period
- added a service function to create AcknowledgementRequest instances from a set of CreditNoteResumeEmail records

**Blockers**:
- None (yet)

**What did I learn?**:
- Not much. Coding monkey today.
- Once the requirements are in place, take some time to slow down, review the work, polish it and to have it make more sense instead of just producing code like a code monkey.

---------------------------------------------------------------------------------------

### Date: 30/05/2024

**Task**: 
- add send email functionality and increment AcknowledgementRequest’s RemindersSent field each time a reminder has been sent

**Time Spent**: 

**Objective**: 
- Write the function to create an AcknowledgementRequest instance 
- Write the function to send Credit Note Resume Table
- Write the function to increment AcknowledgementRequest’s RemindersSent field each time a reminder has been sent

**Achievements**:
- added service function to increment RemindersSent field for an acknowledgement_request instance
- added send_acknowledgement_request_email service function
- added email settings
- updated email settings with expected values and left remaining settings blank to be discussed with Paulo
- added service function to send acknowledgement request email to a dealer
- added high level template for the acknowledgement dashboard

**Blockers**:
- Need access to email settings for securely sending out bulk emails from hp.finance@honda-eu.com

**What did I learn?**:
- This code will need to be refactored, the data and objects model is trash and as a result the functions containing the business logic are trash too. 

---------------------------------------------------------------------------------------

### Date: 31/05/2024

**Task**: 
- add user accounts
- make login screen first screen users see
- work with Paulo to set up email settings

**Achievements**:
- added Custom Login View class that inherits from the LoginView class, for login page
- added login template
- added base template for other templates to use
- added url pattern for custom login view
- added login url and redirect url to settings file
- moved login and base html templates one folder up as Django handles class based views different from function based views using render function
- updated dashboard view function with the login_required decorator so dashboard can only be accessed after loggin in
- added required settings for Azure AD to settings.py file
- updated urls and settings so login page is the first page the users see when opening the dashboard app
- updated settings, urls (both project and app level) and views so that login is required to see dashboard
- added various comments for later cleanup and possible refactor of all the code related to the login page and the url paths

Template below: 
---
**Task**: [Issue #123](Link to the GitHub issue or task)  
**Time Spent**: X hours  
**Contributor**: [Contributor Name](GitHub profile link)

**Objective**: Brief description of the task objective  
**Achievements**:
- Implemented feature X
- Reviewed pull request [#456](Link to PR)
- Updated documentation related to Y

**Blockers**:
- Description of any issues faced and how they were resolved or are pending resolution

**Next Steps**:
- Task or feature to tackle next

---

(Repeat for each entry)
