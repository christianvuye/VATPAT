# Worklog for May 

# Week 18 (01/05/2024 - 05/05/2024)

### Date: 01/05/2024

**Task**: Test field validations for the Credit Notes model

**Time Spent**: 2.5h

**Objective**: Test that that the Credit Notes model does what it needs to do.

**Achievements**:
- Wrote a test to make sure that no credit notes could be added with the same Credit Notes ID.
- Wrote tests to make sure that CN_ID and Account number ID do not exceed character lenght limit.
- Set up fixture dictionaries containing data for the fields of credit notes model instance, with missing fields.
- Wrote a test to see if missing CN_ID would raise IntegrityError.  

**What did I learn?**:
- In Python: when using the syntax 'dictionary["key"] = value' 
    -> Python checks first if "key" exists in the dictionary.
    -> If the key exists, then its value will be updated.
    -> If "key" does not exist yet in the dictionary, the key will be added with the      specifified value. 
- In Django: if a model is dependent on another model through a foreign key relationship
    -> You can use an instance of that model stored in a variable to directly assign it as the foreign key for the model that is dependent on it.
    -> test_credit_note_data['D_ID'] = dealer
- In Django, the '.full_clean()' method is a Django model instance method, and what it does it validate all of the fields of that model. It can be used to manually trigger a validation on a model instance that has been created but not yet saved. When the validation fails, Django will raise a ValidationError. 

**Blockers**:
- Had to set up venv, Git, .env, .gitignore etc. on new laptop.

**Next Steps**:
- Figure out why the missing CN_ID test does not raise an IntegrityError, while the CN_ID is set as primary key in the database, which implicitly constraints it from being a null value. 

---------------------------------------------------------------------------------------
### Date: 02/05/2024

**Task**: Test field validations for the Credit Notes model

**Time Spent**: 2h

**Objective**: Figure out why the missing CN_ID test does not raise an IntegrityError, while the CN_ID is set as primary key in the database, which implicitly constraints it from being a null value. 

**Achievements**:
- I undid all the previous migrations, and set up the models with primary keys for each table, and made sure that the Django models cannot make changes to the database schema.

**Blockers**:
- All the tests are failing now =)

**Next Steps**:
- Figure out why all the test are failing. 

---------------------------------------------------------------------------------------
### Date: 03/05/2024

**Task**: Figure out why all the tests are failing.

**Time Spent**: 2,5h

**Objective**: Figure out why suddenly there is regression of all the previously passing tests. 

**Achievements**:
- After struggling to find out what exactly had gone wrong, I decided to revert the repository back into a state where the tests were passing, the state prior to introducing the changes that brought forth the regression.
- I removed the meta parameter 'managed' which was previously set to 'true' for the database models.
- I had to set default values for the CN_ID and D_ID in the credit notes models to an empty string '' as these are mandatory fields that cannot be NULL values, and the database still had some records with NULL values in them for these columns.
- After making these changes to the model(s) I remade the migrations and ran them.
- After these reversions, the tests ran again.
- Note: the test to check if the 'CN_ID' value could be NULL was not included yet.

**Next Steps**:
- Re-introduce test to see if an empty 'CN_ID' value raises an integrity error.  

----------------------------------------------------------------------------------------
### Date: 04/05/2024

**Task**: Test field validations for the credit notes model.

**Time Spent**: 2,5h

**Objective**: Complete test field validation tests for the credit notes model.

**Achievements**: 
- Wrote tests for required fields CN_ID and D_ID not being nullable.
- Wrote test for validating that CN_ID is unique at the model level.

**What did I learn?**:
- A "ValidationError" is raised for a model-level error.
- An "IntegrityError" is raised for a database-level data integrity error.
- An "OperationalError" is raised for a database connection error.
- The .full_clean() model method checks for unique constraints as defined in the Django model and should be explicitly called to catch validation errors before data hitting the database.
- The .save() model method saves model instances to the database. It takes the current state of the fields in the model instance and writes them to the database table. If the primary key already exists, the .save() method updates the record, otherwise it creates a new record. 
- IMPORTANT! The .save() model does not perform any validation of the data. To ensure the data is valid before saving to the database, call the .full_clean() method before calling .save()

**Next Steps**:
- Check with Paulo if TotalDocumentAmount, TotalVATAmountDocument, TotalDocumentAmountWithVAT, AccountingNumberID and IssuedDate are all mandatory fields.
- Paulo has confirmed to me that these fields are all mandatory. Tomorrow, I will write tests to make sure that these constraints are implemented.  

----------------------------------------------------------------------------------------
# Week 18 (06/05/2024 - 12/05/2024)

### Date: 09/05/2024

**Task**: Complete models for dashboard app

**Time Spent**: 2h

**Objective**: Complete models for dashboard app, stop doing TDD as it takes too much time and you will not be able to deliver the application on time to the business.

**Achievements**:
- Completed the Credit Notes model, but it is untested. 
- Started working on Credit Notes Resume Email model. 

**What did I learn?**:
- TDD is a very useful practice, but it can take a lot of time initially to set up all of the tests. If I had more time, I would have continued TDD, but that is not the case unfortunately. 
- Difference between "auto_now_add" and "auto_now":
    - "auto_now_add": sets the field to the current date and time only when the model instance is created.
    - "auto_now": sets the field to the current date and time every time the model instance is saved.

**Next Steps**:
- Complete CreditNoteResume model.
- Figure out if the dates on instances of credit notes, credit note resumes and acknowledgementrequest should be assigned on the creation of that instance or whether they have been set prior. 

---------------------------------------------------------------------------------------

### Date: 10/05/2024

**Task**: Complete models for dashboard app

**Time Spent**: 2.5h

**Objective**:
- Complete CreditNoteResume model.
- Figure out if the dates on instances of credit notes, credit note resumes and acknowledgementrequest should be assigned on the creation of that instance or whether they have been set prior. 

**Achievements**:
- Completed the Credit Notes model, but it is untested. 
- Started working on Credit Notes Resume Email model. 

**What did I learn?**:
- TDD is a very useful practice, but it can take a lot of time initially to set up all of the tests. If I had more time, I would have continued TDD, but that is not the case unfortunately. 
- Difference between "auto_now_add" and "auto_now":
    - "auto_now_add": sets the field to the current date and time only when the model instance is created.
    - "auto_now": sets the field to the current date and time every time the model instance is saved.

**Next Steps**:


---------------------------------------------------------------------------------------

Template below: 
---
**Task**: [Issue #123](Link to the GitHub issue or task)  
**Time Spent**: X hours  
**Contributor**: [Contributor Name](GitHub profile link)

**Objective**: Brief description of the task objective  
**Achievements**:
- Implemented feature X
- Reviewed pull request [#456](Link to PR)
- Updated documentation related to Y

**Blockers**:
- Description of any issues faced and how they were resolved or are pending resolution

**Next Steps**:
- Task or feature to tackle next

---

(Repeat for each entry)
